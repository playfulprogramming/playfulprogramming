---
import ProfileSection from "./components/profile-section.astro";
import { SubHeader } from "../../components/subheader/subheader";
import { PostCardGrid } from "components/post-card/post-card-grid";
import { PersonInfo, PostInfo } from "types/index";
import { Button } from "../../components";
import styles from "./person-page.module.scss";
import AchievementCard from "./components/achievement-card.astro";
import { buildSearchQuery } from "../search/search";
import { getAchievements, Achievement } from "src/utils/achievements";
import { translate } from "utils/translations";
import * as api from "utils/api";
import { isDefined } from "utils/is-defined";

interface UnicornPageProps {
	person: PersonInfo;
	posts: PostInfo[];
}

const { person, posts } = Astro.props as UnicornPageProps;

const achievementsMeta: Achievement[] = [];
for await (const achievement of getAchievements(person))
	achievementsMeta.push(achievement);

const postsToDisplay = posts.slice(0, 4);
const numberOfAchievementsToShowAtStart = posts.length ? 3 : 6;
const showAchievementToggle =
	achievementsMeta.length > numberOfAchievementsToShowAtStart;
const showPostsToggle = posts.length > postsToDisplay.length;

const postAuthors = new Map(
	[...new Set(posts.flatMap((p) => p.authors))]
		.map((id) => api.getPersonById(id, person.locale))
		.filter(isDefined)
		.map((u) => [u.id, u]),
);
---

<div class={styles.container}>
	<ProfileSection person={person} />
	<section class={styles.contentContainer}>
		<!-- TODO: Translate -->
		<SubHeader tag="h2" text="Achievements" id="achievements">
			{
				showAchievementToggle && (
					<Button
						id="view-all-achievements"
						tag="button"
						type="button"
						aria-label="View all achievements"
						aria-pressed="false"
					>
						{translate(Astro, "action.view_all")}
					</Button>
				)
			}
		</SubHeader>
		<ul
			class={styles.achievementsContainer}
			role="list"
			aria-labelledby="achievements"
		>
			{
				achievementsMeta.map((ach, i) => {
					const shouldShow = i < numberOfAchievementsToShowAtStart;
					return (
						<li
							data-hide-initially={!shouldShow}
							style={shouldShow ? "" : "display: none;"}
						>
							<AchievementCard achievement={ach} />
						</li>
					);
				})
			}
		</ul>
		{
			postsToDisplay.length
				? [
						<SubHeader
							tag="h2"
							text="Recent articles"
							id="recent-articles-header"
						>
							{showPostsToggle && (
								<Button
									tag="a"
									href={`/search?${buildSearchQuery({
										searchQuery: "*",
										filterAuthors: [person.id],
									})}`}
									aria-labelledby="recent-articles-header"
								>
									{translate(Astro, "action.view_all")}
								</Button>
							)}
						</SubHeader>,
						<PostCardGrid
							aria-labelledby={"recent-articles-header"}
							postsToDisplay={postsToDisplay}
							postAuthors={postAuthors}
							postHeadingTag="h3"
						/>,
					]
				: undefined
		}
	</section>
</div>

<script>
	const viewAllAchievementsButton: HTMLElement = document.querySelector(
		"#view-all-achievements",
	)!;
	const viewAllAchievementsText: HTMLElement =
		viewAllAchievementsButton.querySelector(".innerText")!;

	if (viewAllAchievementsButton) {
		const hiddenAchievements: HTMLElement[] = Array.from(
			document.querySelectorAll("[data-hide-initially='true']"),
		);

		let expanded = false;

		viewAllAchievementsButton.addEventListener("click", () => {
			expanded = !expanded;

			hiddenAchievements.forEach((achievement) => {
				achievement.style.display = expanded ? "" : "none";
			});

			// ONLY updating "aria-pressed" here, and not changing "aria-label"
			// This is so that the button reads: "View all achievements, toggle button, not pressed" or "View all achievements, toggle button, pressed"
			// otherwise, "View less achievements, toggle button, pressed" is not clear about the state of the button
			viewAllAchievementsButton.setAttribute("aria-pressed", String(expanded));

			viewAllAchievementsText.innerText = expanded ? "View less" : "View all";
		});
	}
</script>
