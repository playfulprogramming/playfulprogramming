---
import { getPictureUrls } from "utils/get-picture";
import { getPeopleByLang } from "../../utils/api";
import style from "./get-involved-header.module.scss";
import Hr from "./hr.astro";
import { Button } from "components/index";

const people = getPeopleByLang("en").map((person) => {
	const imageUrls = getPictureUrls({
		src: person.profileImgMeta.relativeServerPath,
		width: 160,
		height: 160,
	});
	const badgeUrls = person.roles.length
		? getPictureUrls({
				src: `/stickers/role_${person.roles[0]}.svg`,
				width: 64,
				height: 64,
			})
		: null;
	const imageUrl = Object.values(imageUrls.png!).at(0);
	const badgeUrl = badgeUrls ? Object.values(badgeUrls.png!).at(0) : undefined;
	return { imageUrl, badgeUrl };
});
---

<section class={style.headerContainer}>
	<div class={style.getInvolvedContainer}>
		<div class={style.getInvolvedContents}>
			<img
				width="32"
				height="32"
				src="/flair/star.svg"
				alt=""
				class={style.starFlair}
				aria-hidden="true"
			/>
			<img
				width="32"
				height="32"
				src="/flair/pink_bowtie.svg"
				alt=""
				class={style.bowtieFlair}
				aria-hidden="true"
			/>
			<h1 class={style.getInvolvedHeader}>Join us!</h1>
			<div class={style.break}>
				<Hr />
			</div>
			<p class={`text-style-headline-6 ${style.paragraph}`}>
				As a non-profit, Playful Programming embraces the best part of Open
				Source: Weâ€™re run by real people wanting to make an impact in the world
				and help others learn.
			</p>
			<Button tag="button" class={style.playPauseBtn} id="carousel-play-pause">
				Pause
			</Button>
		</div>
		<canvas
			id="get-involved-header-canvas"
			class={style.getInvolvedCanvas}
			data-people={JSON.stringify(people)}></canvas>
	</div>
</section>

<script>
	// In a requestAnimationFrame loop, take each item and change the X, Y, and scale to rotate the items in the circle clockwise
	import { calculatePosition } from "./get-involved-header";

	const NUMBER_OF_INNER_ITEMS = 22;
	const NUMBER_OF_OUTER_ITEMS = 28;
	const INNER_OFFSET = 150;
	const OUTER_OFFSET = 300;

	const CIRCLE_ROTATION_SPEED = 0.001;
	const OUTER_SPEED_MULTIPLIER = 0.5;

	const canvas = document.querySelector(
		"#get-involved-header-canvas",
	) as HTMLCanvasElement;
	const context = canvas.getContext("2d") as CanvasRenderingContext2D;
	context.imageSmoothingEnabled = true;
	context.imageSmoothingQuality = "high";

	const people = JSON.parse(canvas.dataset.people ?? "") as {
		imageUrl: string;
		badgeUrl?: string;
	}[];
	const reversePeople = people.slice().reverse();

	const playPauseBtn = document.querySelector(
		"#carousel-play-pause",
	) as HTMLElement;

	let innerAngle = 0;
	let outerAngle = 0;
	// Does the user have `prefers-reduced-motion` enabled?
	let noMotion = false;
	// Has the user explicitly paused using the button?
	let paused = false;
	// The previous coords for the mouse/touch movement
	let prevY = 0;
	let prevX = 0;
	// The timestamp of the last mouse/touch movement, in milliseconds since page load
	let prevTimestamp = 0;
	// The speed of which to move the icons left/right when dragging, used for momentum
	let speed = 0;
	// Whether the mouse button is currently held down
	let isMouseDown = false;

	const isMouseEvent = (e: any): e is MouseEvent => {
		return "clientX" in e;
	};
	function onMouseMove(e: MouseEvent | TouchEvent) {
		const currentX = isMouseEvent(e) ? e.clientX : e.touches[0].clientX;
		const currentY = isMouseEvent(e) ? e.clientY : e.touches[0].clientY;
		if (prevX === 0) {
			prevX = currentX;
			prevY = currentY;
		}

		// Ignore vertical scrolls/drags on mobile
		if (Math.abs(currentY - prevY) > Math.abs(currentX - prevX)) {
			return;
		}

		const diff = currentX - prevX;
		const diffMs = prevTimestamp;

		prevTimestamp = e.timeStamp; // "timeStamp" is milliseconds since page load
		const diffOverMs = diff / Math.max(1, prevTimestamp - diffMs);
		speed = diffOverMs * -0.05;

		prevX = currentX;
		prevY = currentY;
	}

	let width: number;
	let innerContainerSize: number;
	let outerContainerSize: number;
	let innerX: number;
	let outerX: number;

	function updateSize() {
		canvas.width = canvas.offsetWidth;
		canvas.height = canvas.offsetHeight;

		width = canvas.width;
		innerContainerSize = 960;
		outerContainerSize = innerContainerSize + 314;
		innerX = (width - innerContainerSize) / 2;
		outerX = (width - outerContainerSize) / 2;

		requestAnimationFrame(() => draw(0));
	}

	window.addEventListener("resize", updateSize);

	const getSafeIndex = <T,>(array: T[], index: number) => {
		return array[index % array.length];
	};

	const lerp = (from: number, to: number, amount: number) => {
		const result = from + (to - from) * Math.min(1, Math.max(0, amount));
		return isFinite(result) ? result : from;
	};

	const images: Map<string, HTMLImageElement> = new Map();
	function getImage(
		url: string,
		width: number,
		height: number,
	): HTMLImageElement | null {
		let image = images.get(url);
		if (!image) {
			image = document.createElement("img");
			image.width = width;
			image.height = height;
			image.loading = "eager";
			image.decoding = "async";
			image.src = url;

			images.set(url, image);
		}

		return image.complete ? image : null;
	}

	function drawPerson(
		image: HTMLImageElement,
		badge: HTMLImageElement | null,
		pos: {
			x: number;
			y: number;
			scale: number;
			containerX: number;
			containerSize: number;
		},
	) {
		// x and y are percentages (EG: 80.51) of the container size
		const x = pos.containerX + pos.containerSize * (pos.x / 100);
		const y = pos.containerSize * (pos.y / 100) - pos.containerSize / 2;
		const scale = 80 * pos.scale;

		context.save();
		context.beginPath();
		context.arc(x, y, scale / 2, 0, Math.PI * 2);
		context.closePath();
		context.clip();

		context.drawImage(image, x - scale / 2, y - scale / 2, scale, scale);

		context.restore();

		if (badge) {
			context.save();
			// (roughly) matches the `--shadow_sticker` box-shadow styling
			context.shadowColor = "rgba(0, 0, 0, 0.24)";
			context.shadowBlur = 1.5;
			context.shadowOffsetX = 0;
			context.shadowOffsetY = 1.25;
			context.drawImage(
				badge,
				x + scale / 6,
				y + scale / 6,
				32 * pos.scale,
				32 * pos.scale,
			);
			context.restore();
		}
	}

	const innerScaleInterpolated = new Array(NUMBER_OF_INNER_ITEMS).fill(0);
	const outerScaleInterpolated = new Array(NUMBER_OF_OUTER_ITEMS).fill(0);

	function draw(delta: number) {
		context.clearRect(0, 0, canvas.width, canvas.height);

		for (let i = 0; i < NUMBER_OF_INNER_ITEMS; i++) {
			const person = getSafeIndex(people, i);
			const image = getImage(person.imageUrl, 160, 160);
			const badge = person.badgeUrl ? getImage(person.badgeUrl, 64, 64) : null;
			if (image == null || (badge == null && person.badgeUrl)) break;

			const pos = calculatePosition(
				NUMBER_OF_INNER_ITEMS,
				i + innerAngle,
				INNER_OFFSET,
			);

			const prevScale = innerScaleInterpolated[i];
			let nextScale = lerp(prevScale, pos.scale, delta * (5 / 1000));
			nextScale = Math.max(nextScale, 0);
			innerScaleInterpolated[i] = nextScale;

			drawPerson(image, badge, {
				...pos,
				scale: nextScale,
				containerX: innerX,
				containerSize: innerContainerSize,
			});
		}

		for (let i = 0; i < NUMBER_OF_OUTER_ITEMS; i++) {
			const person = getSafeIndex(reversePeople, i);
			const image = getImage(person.imageUrl, 160, 160);
			const badge = person.badgeUrl ? getImage(person.badgeUrl, 64, 64) : null;
			if (image == null || (badge == null && person.badgeUrl)) break;

			const pos = calculatePosition(
				NUMBER_OF_OUTER_ITEMS,
				i + outerAngle,
				OUTER_OFFSET,
			);

			const prevScale = outerScaleInterpolated[i];
			let nextScale = lerp(prevScale, pos.scale, delta * (5 / 1000));
			nextScale = Math.max(nextScale, 0);
			outerScaleInterpolated[i] = nextScale;

			drawPerson(image, badge, {
				...pos,
				scale: nextScale,
				containerX: outerX,
				containerSize: outerContainerSize,
			});
		}
	}

	let previousDraw = 0;
	function update(now: number) {
		// "now" is milliseconds since page load
		const delta = now - previousDraw;
		previousDraw = now;

		if (!noMotion && !paused) {
			if (!isMouseDown) {
				// decelerate speed due to mouse movement over 10s
				speed = lerp(speed, 0, (now - prevTimestamp) / (100 * 1000));
			}

			// multiplier should be ~1 if running at 144Hz
			const multiplier = Math.max(delta * (144 / 1000), 0);
			const currentSpeed = isMouseDown ? speed : speed + CIRCLE_ROTATION_SPEED;
			innerAngle += currentSpeed * multiplier;
			outerAngle += currentSpeed * OUTER_SPEED_MULTIPLIER * multiplier;
			// ensure that innerAngle and outerAngle stay in the range of 0..num
			innerAngle = (innerAngle + NUMBER_OF_INNER_ITEMS) % NUMBER_OF_INNER_ITEMS;
			outerAngle = (outerAngle + NUMBER_OF_OUTER_ITEMS) % NUMBER_OF_OUTER_ITEMS;
		}

		draw(delta);
		requestAnimationFrame(update);
	}

	function setupEventListeners() {
		// If prefers-reduced-motion is enabled, stop the animation
		const mediaQuery = window.matchMedia("(prefers-reduced-motion: reduce)");
		mediaQuery.addEventListener("change", (e) => {
			if (e.matches) {
				noMotion = true;
				playPauseBtn.ariaHidden = `true`;
			} else {
				noMotion = false;
				playPauseBtn.ariaHidden = `false`;
			}
		});
		noMotion = mediaQuery.matches;
		playPauseBtn.ariaHidden = `${noMotion}`;

		playPauseBtn.addEventListener("click", () => {
			paused = !paused;
			playPauseBtn.children[0].textContent = paused ? "Play" : "Pause";
		});

		function handleDragStart(e: MouseEvent | TouchEvent) {
			if (paused) return;

			// Don't start a drag event when text is selected
			const selection = window.getSelection();
			if (selection?.toString()?.length) return;

			if (e.type === "mousedown" && isMouseEvent(e)) {
				const flags = e.buttons !== undefined ? e.buttons : e.which;
				const isPrimaryButton = (flags & 1) === 1;
				if (!isPrimaryButton) return;

				document.addEventListener("mousemove", onMouseMove, { passive: true });
			} else if (e.type === "touchstart") {
				document.addEventListener("touchmove", onMouseMove, { passive: true });
			}

			isMouseDown = true;
		}

		function handleDragEnd() {
			isMouseDown = false;
			document.removeEventListener("mousemove", onMouseMove);
			document.removeEventListener("touchmove", onMouseMove);
			prevX = 0;
			prevY = 0;
		}

		function setupContainerListeners(container: HTMLElement) {
			container.addEventListener("touchstart", handleDragStart, {
				passive: true,
			});
			container.addEventListener("mousedown", handleDragStart, {
				passive: true,
			});
		}

		document.addEventListener("mouseup", handleDragEnd);
		document.addEventListener("touchend", handleDragEnd);

		return {
			setupContainerListeners,
		};
	}

	// Setup event listeners
	const { setupContainerListeners } = setupEventListeners();
	setupContainerListeners(canvas);

	// Start the event loop
	updateSize();
	requestAnimationFrame(update);
</script>
