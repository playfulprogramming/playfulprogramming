---
import { FixedArray } from "../../../../types/ArrayLike";
import InfiniteLoopSlider from "./infinite-loop-slider.astro";

import "./chip-group.scss";

import playIcon from "../icons/play.svg?raw";
import pauseIcon from "../icons/pause.svg?raw";

const random = (min: number, max: number) =>
	Math.floor(Math.random() * (max - min)) + min;
const shuffle = <T extends ReadonlyArray<unknown>>(arr: T): T =>
	[...arr].sort(() => 0.5 - Math.random()) as never as T;

const MAX_DURATION = 56000 * 2;
const MIN_DURATION = 56000;
const TAGS_PER_ROW = 10;

export type TagList = Readonly<FixedArray<string, 30>>;

interface ChipGroupProps {
	tags: TagList;
	ariaLabel: string;
	rows?: number;
}

const { tags, ariaLabel, rows } = Astro.props as ChipGroupProps;
const ROWS = rows ?? 3;
const SHUFFLED_TAGS = shuffle(tags);
const tagTable = [...new Array(ROWS)].map((_, i) =>
	SHUFFLED_TAGS.slice(TAGS_PER_ROW * i, TAGS_PER_ROW * (i + 1)),
);

const uniqueTags = Array.from(new Set(tagTable.flat()));
---

<div data-chip-group-container class="chip-group-container">
	<ul aria-label={ariaLabel} class="srOnly">
		{uniqueTags.map((tag) => <li>{tag}</li>)}
	</ul>
	<ul class="tag-list" aria-hidden={true}>
		{
			tagTable.map((_, i) => (
				<InfiniteLoopSlider
					duration={random(MIN_DURATION, MAX_DURATION)}
					reverse={i % 2}
				>
					{tagTable[i].map((tag) => (
						<li class="text-style-body-medium-bold tag">{tag}</li>
					))}
					{tagTable[i].map((tag) => (
						<li class="text-style-body-medium-bold tag">{tag}</li>
					))}
				</InfiniteLoopSlider>
			))
		}
	</ul>
	<div class="fade"></div>
	<button
		class="text-style-button ffg-button-base ffg-big-button ffg-filled-button chip-group-pause-button-container"
		data-chip-group-pause-btn
	>
		<span class="pause" aria-label="Pause motion" set:html={pauseIcon} />
		<span class="play" aria-label="Resume motion" set:html={playIcon} />
	</button>
</div>

<script>
	const buttons = Array.from(
		document.querySelectorAll(
			"[data-chip-group-pause-btn]",
		) as unknown as HTMLElement[],
	).filter((el) => !el.dataset.isBound);

	const containers = Array.from(
		document.querySelectorAll(
			"[data-chip-group-container]",
		) as unknown as HTMLElement[],
	);

	buttons.forEach((button) => {
		button.dataset.isBound = "true";
		button.addEventListener("click", (event) => {
			event.stopPropagation();
			containers.forEach((container) => {
				container.dataset.paused = String(container.dataset.paused !== "true");
			});
		});
	});
</script>
